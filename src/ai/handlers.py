from telegram import Update, ChatAction, ParseMode
from telegram.ext import CallbackContext, PrefixHandler
from functools import partial

import src.commands as commands
from src.common import chat_admins_only
from src.subscriber import SubscriptionType
from ai import formatter
import logging

logger = logging.getLogger(__name__)

MAX_USERNAMES = 30


@chat_admins_only
def _subscribe_games(update: Update, context: CallbackContext):
    usernames = context.args
    if not usernames:
        update.message.reply_text("–°—Çüî•–∏—Ç  —É–∫–∞–∑üî•—Ç—å  –Ω–∏–∫")
        return

    chat_id = update.message.chat_id
    sub = context.bot.subscriber.get_sub(chat_id, SubscriptionType.AI_GAMES)
    if sub is None:
        usernames = set(usernames[:MAX_USERNAMES])
        context.bot.subscriber.add_sub(chat_id, SubscriptionType.AI_GAMES, usernames)
        update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω–∞")
    else:
        if len(usernames) + len(sub.data) > MAX_USERNAMES:
            usernames = usernames[:MAX_USERNAMES - len(sub.data)]

        sub.data |= set(usernames)
        context.bot.subscriber.update_sub(sub)
        update.message.reply_text(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–∫—É—â–∏–µ –Ω–∏–∫–∏: *{', '.join(sub.data)}*",
            parse_mode=ParseMode.MARKDOWN)


subscribe_games = PrefixHandler(commands.PREFIXES, commands.SUB_AI_GAMES, _subscribe_games)


@chat_admins_only
def _unsubscribe_games(update: Update, context: CallbackContext):
    usernames = context.args
    if not usernames:
        update.message.reply_text("–°—Çüî•–∏—Ç  —É–∫üî•–∑–∞—Ç—å  –Ω–∏–∫")
        return

    chat_id = update.message.chat_id
    sub = context.bot.subscriber.get_sub(chat_id, SubscriptionType.AI_GAMES)
    if sub is None:
        update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –øüî•–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–≥—Ä—ã")
        return

    sub.data.difference_update(set(usernames))
    if sub.data:
        context.bot.subscriber.update_sub(sub)
        update.message.reply_text(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–∫—É—â–∏–µ –Ω–∏–∫–∏: *{', '.join(sub.data)}*",
            parse_mode=ParseMode.MARKDOWN)
    else:
        context.bot.subscriber.remove_sub(chat_id, SubscriptionType.AI_GAMES)
        update.message.reply_text(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–≥—Ä")


unsubscribe_games = PrefixHandler(commands.PREFIXES, commands.UNSUB_AI_GAMES, _unsubscribe_games)


def _subscribe_ai_chat_top(update: Update, context: CallbackContext):
    usernames = set(context.args)
    if not usernames:
        update.message.reply_text("–°—Çüî•–∏—Ç  —É–∫–∞–∑üî•—Ç—å  –Ω–∏–∫")
        return

    chat_id = update.message.chat_id
    sub = context.bot.subscriber.get_sub(chat_id, SubscriptionType.AI_CHAT_TOP)
    if sub is None:
        context.bot.subscriber.add_sub(chat_id, SubscriptionType.AI_CHAT_TOP, usernames)
    else:
        sub.data |= usernames
        context.bot.subscriber.update_sub(sub)
        usernames = sub.data
    update.message.reply_text(
        f"–¢–æ–ø —á–∞—Ç–∞: *{', '.join(sorted(usernames))}*",
        parse_mode=ParseMode.MARKDOWN)


subscribe_ai_chat_top = PrefixHandler(commands.PREFIXES, commands.SUB_AI_CHAT_TOP,
                                      _subscribe_ai_chat_top)


def _unsubscribe_ai_chat_top(update: Update, context: CallbackContext):
    usernames = set(context.args)
    if not usernames:
        update.message.reply_text("–°—Çüî•–∏—Ç  —É–∫üî•–∑–∞—Ç—å  –Ω–∏–∫")
        return

    chat_id = update.message.chat_id
    sub = context.bot.subscriber.get_sub(chat_id, SubscriptionType.AI_CHAT_TOP)
    if sub is None:
        update.message.reply_text("–¢–æ–ø —á–∞—Ç–∞ –ø—É—Å—Ç")
        return

    sub.data.difference_update(usernames)
    if sub.data:
        context.bot.subscriber.update_sub(sub)
        update.message.reply_text(
            f"–¢–æ–ø —á–∞—Ç–∞: *{', '.join(sorted(sub.data))}*",
            parse_mode=ParseMode.MARKDOWN)
    else:
        context.bot.subscriber.remove_sub(chat_id, SubscriptionType.AI_CHAT_TOP)
        update.message.reply_text(f"–¢–æ–ø —á–∞—Ç–∞ –ø—É—Å—Ç")


unsubscribe_ai_chat_top = PrefixHandler(commands.PREFIXES, commands.UNSUB_AI_CHAT_TOP,
                                        _unsubscribe_ai_chat_top)


def top_callback(update: Update, context: CallbackContext, short=True):
    context.bot.send_chat_action(chat_id=update.message.chat_id,
                                 action=ChatAction.TYPING)

    n = 10
    if context.args:
        try:
            n = int(context.args[0])
        except ValueError:
            logger.warning(f"Couldn't parse N for ai top callback: {context.args[0]}")
            update.message.reply_text("–¢—ã  –º–µ–Ω—è  –æ–≥üî•—Ä—á–∞–µ—à—å")
            return
        if n == 0:
            update.message.reply_text("Cüî•mmandos")
            return
        if n < 0:
            update.message.reply_text("–ù–µ  –Ωüî•–¥–æ —Ç–∞–∫")
            return
    players = context.bot.ai_chart.get_top(n)
    if short:
        text = formatter.format_top(context.bot.ai_chart.name, players)
    else:
        text = formatter.format_toop(context.bot.ai_chart.name, players)
    if len(text) > 4000:
        text = text[:-3][:4000] + ".üî•..üî•üî•```"
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


top = PrefixHandler(commands.PREFIXES, commands.TOP_AI, partial(top_callback, short=True))
toop = PrefixHandler(commands.PREFIXES, commands.TOOP_AI, partial(top_callback, short=False))


def pos_callback(update: Update, context: CallbackContext, short=True):
    context.bot.send_chat_action(chat_id=update.message.chat_id,
                                 action=ChatAction.TYPING)

    usernames = context.args
    if not usernames:
        update.message.reply_text("–°—Çüî•–∏—Ç  —É–∫üî•–∑–∞—Ç—å  –Ω–∏–∫")
        return
    players = context.bot.ai_chart.get_pos(usernames)
    if not players:
        update.message.reply_text("–ù–µ  –Ωüî•—à–µ–ª  —Ç–∞–∫–∏—Ö  —É—á–∞—Å—Ç–Ω–∏–∫üî•–≤")
        return

    if short:
        text = formatter.format_pos(context.bot.ai_chart.name, players)
    else:
        text = formatter.format_poos(context.bot.ai_chart.name, players)
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


pos = PrefixHandler(commands.PREFIXES, commands.POS_AI, partial(pos_callback, short=True))
poos = PrefixHandler(commands.PREFIXES, commands.POOS_AI, partial(pos_callback, short=False))


def chat_top_callback(update: Update, context: CallbackContext, short=True):
    context.bot.send_chat_action(chat_id=update.message.chat_id,
                                 action=ChatAction.TYPING)

    chat_id = update.message.chat_id
    sub = context.bot.subscriber.get_sub(chat_id, SubscriptionType.AI_CHAT_TOP)
    if not sub or not sub.data:
        update.message.reply_text("–¢üî•–ø  —á–∞—Çüî• –ø—É—Å—Ç")
        return
    players = context.bot.ai_chart.get_pos(sub.data)
    if short:
        text = formatter.format_pos(context.bot.ai_chart.name, players)
    else:
        text = formatter.format_poos(context.bot.ai_chart.name, players)
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

chat_top = PrefixHandler(commands.PREFIXES, commands.CHAT_TOP, partial(chat_top_callback, short=True))
chat_toop = PrefixHandler(commands.PREFIXES, commands.CHAT_TOOP, partial(chat_top_callback, short=False))